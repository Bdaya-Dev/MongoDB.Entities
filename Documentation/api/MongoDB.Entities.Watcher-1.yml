### YamlMime:ManagedReference
items:
- uid: MongoDB.Entities.Watcher`1
  commentId: T:MongoDB.Entities.Watcher`1
  id: Watcher`1
  parent: MongoDB.Entities
  children:
  - MongoDB.Entities.Watcher`1.CanRestart
  - MongoDB.Entities.Watcher`1.IsInitialized
  - MongoDB.Entities.Watcher`1.Name
  - MongoDB.Entities.Watcher`1.OnChanges
  - MongoDB.Entities.Watcher`1.OnChangesAsync
  - MongoDB.Entities.Watcher`1.OnChangesCSD
  - MongoDB.Entities.Watcher`1.OnChangesCSDAsync
  - MongoDB.Entities.Watcher`1.OnError
  - MongoDB.Entities.Watcher`1.OnStop
  - MongoDB.Entities.Watcher`1.ReStart(MongoDB.Bson.BsonDocument)
  - MongoDB.Entities.Watcher`1.ResumeToken
  - MongoDB.Entities.Watcher`1.Start(MongoDB.Entities.EventType,System.Func{MongoDB.Driver.FilterDefinitionBuilder{MongoDB.Driver.ChangeStreamDocument{`0}},MongoDB.Driver.FilterDefinition{MongoDB.Driver.ChangeStreamDocument{`0}}},System.Int32,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  - MongoDB.Entities.Watcher`1.Start(MongoDB.Entities.EventType,System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Func{MongoDB.Driver.FilterDefinitionBuilder{MongoDB.Driver.ChangeStreamDocument{`0}},MongoDB.Driver.FilterDefinition{MongoDB.Driver.ChangeStreamDocument{`0}}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  - MongoDB.Entities.Watcher`1.Start(MongoDB.Entities.EventType,System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Linq.Expressions.Expression{System.Func{MongoDB.Driver.ChangeStreamDocument{`0},System.Boolean}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  - MongoDB.Entities.Watcher`1.Start(MongoDB.Entities.EventType,System.Linq.Expressions.Expression{System.Func{MongoDB.Driver.ChangeStreamDocument{`0},System.Boolean}},System.Int32,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  - MongoDB.Entities.Watcher`1.StartWithToken(MongoDB.Bson.BsonDocument,MongoDB.Entities.EventType,System.Func{MongoDB.Driver.FilterDefinitionBuilder{MongoDB.Driver.ChangeStreamDocument{`0}},MongoDB.Driver.FilterDefinition{MongoDB.Driver.ChangeStreamDocument{`0}}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  - MongoDB.Entities.Watcher`1.StartWithToken(MongoDB.Bson.BsonDocument,MongoDB.Entities.EventType,System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Func{MongoDB.Driver.FilterDefinitionBuilder{MongoDB.Driver.ChangeStreamDocument{`0}},MongoDB.Driver.FilterDefinition{MongoDB.Driver.ChangeStreamDocument{`0}}},System.Int32,System.Threading.CancellationToken)
  - MongoDB.Entities.Watcher`1.StartWithToken(MongoDB.Bson.BsonDocument,MongoDB.Entities.EventType,System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Linq.Expressions.Expression{System.Func{MongoDB.Driver.ChangeStreamDocument{`0},System.Boolean}},System.Int32,System.Threading.CancellationToken)
  - MongoDB.Entities.Watcher`1.StartWithToken(MongoDB.Bson.BsonDocument,MongoDB.Entities.EventType,System.Linq.Expressions.Expression{System.Func{MongoDB.Driver.ChangeStreamDocument{`0},System.Boolean}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: Watcher<T>
  nameWithType: Watcher<T>
  fullName: MongoDB.Entities.Watcher<T>
  type: Class
  source:
    id: Watcher
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Watcher.cs
    startLine: 26
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nWatcher for subscribing to mongodb change streams.\n"
  example: []
  syntax:
    content: >-
      public class Watcher<T>

          where T : IEntity
    typeParameters:
    - id: T
      description: The type of entity
    content.vb: Public Class Watcher(Of T As IEntity)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: Watcher(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: MongoDB.Entities.Watcher(Of T)
  name.vb: Watcher(Of T)
- uid: MongoDB.Entities.Watcher`1.OnChanges
  commentId: E:MongoDB.Entities.Watcher`1.OnChanges
  id: OnChanges
  parent: MongoDB.Entities.Watcher`1
  langs:
  - csharp
  - vb
  name: OnChanges
  nameWithType: Watcher<T>.OnChanges
  fullName: MongoDB.Entities.Watcher<T>.OnChanges
  type: Event
  source:
    id: OnChanges
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Watcher.cs
    startLine: 31
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nThis event is fired when the desired types of events have occured. Will have a list of &apos;entities&apos; that was received as input.\n"
  example: []
  syntax:
    content: public event Action<IEnumerable<T>> OnChanges
    return:
      type: System.Action{System.Collections.Generic.IEnumerable{{T}}}
    content.vb: Public Event OnChanges As Action(Of IEnumerable(Of T))
  nameWithType.vb: Watcher(Of T).OnChanges
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Watcher(Of T).OnChanges
- uid: MongoDB.Entities.Watcher`1.OnChangesAsync
  commentId: E:MongoDB.Entities.Watcher`1.OnChangesAsync
  id: OnChangesAsync
  parent: MongoDB.Entities.Watcher`1
  langs:
  - csharp
  - vb
  name: OnChangesAsync
  nameWithType: Watcher<T>.OnChangesAsync
  fullName: MongoDB.Entities.Watcher<T>.OnChangesAsync
  type: Event
  source:
    id: OnChangesAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Watcher.cs
    startLine: 36
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nThis event is fired when the desired types of events have occured. Will have a list of &apos;entities&apos; that was received as input.\n"
  example: []
  syntax:
    content: public event AsyncEventHandler<IEnumerable<T>> OnChangesAsync
    return:
      type: MongoDB.Entities.AsyncEventHandler{System.Collections.Generic.IEnumerable{{T}}}
    content.vb: Public Event OnChangesAsync As AsyncEventHandler(Of IEnumerable(Of T))
  nameWithType.vb: Watcher(Of T).OnChangesAsync
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Watcher(Of T).OnChangesAsync
- uid: MongoDB.Entities.Watcher`1.OnChangesCSD
  commentId: E:MongoDB.Entities.Watcher`1.OnChangesCSD
  id: OnChangesCSD
  parent: MongoDB.Entities.Watcher`1
  langs:
  - csharp
  - vb
  name: OnChangesCSD
  nameWithType: Watcher<T>.OnChangesCSD
  fullName: MongoDB.Entities.Watcher<T>.OnChangesCSD
  type: Event
  source:
    id: OnChangesCSD
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Watcher.cs
    startLine: 41
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nThis event is fired when the desired types of events have occured. Will have a list of &apos;ChangeStreamDocuments&apos; that was received as input.\n"
  example: []
  syntax:
    content: public event Action<IEnumerable<ChangeStreamDocument<T>>> OnChangesCSD
    return:
      type: System.Action{System.Collections.Generic.IEnumerable{MongoDB.Driver.ChangeStreamDocument{{T}}}}
    content.vb: Public Event OnChangesCSD As Action(Of IEnumerable(Of ChangeStreamDocument(Of T)))
  nameWithType.vb: Watcher(Of T).OnChangesCSD
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Watcher(Of T).OnChangesCSD
- uid: MongoDB.Entities.Watcher`1.OnChangesCSDAsync
  commentId: E:MongoDB.Entities.Watcher`1.OnChangesCSDAsync
  id: OnChangesCSDAsync
  parent: MongoDB.Entities.Watcher`1
  langs:
  - csharp
  - vb
  name: OnChangesCSDAsync
  nameWithType: Watcher<T>.OnChangesCSDAsync
  fullName: MongoDB.Entities.Watcher<T>.OnChangesCSDAsync
  type: Event
  source:
    id: OnChangesCSDAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Watcher.cs
    startLine: 46
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nThis event is fired when the desired types of events have occured. Will have a list of &apos;ChangeStreamDocuments&apos; that was received as input.\n"
  example: []
  syntax:
    content: public event AsyncEventHandler<IEnumerable<ChangeStreamDocument<T>>> OnChangesCSDAsync
    return:
      type: MongoDB.Entities.AsyncEventHandler{System.Collections.Generic.IEnumerable{MongoDB.Driver.ChangeStreamDocument{{T}}}}
    content.vb: Public Event OnChangesCSDAsync As AsyncEventHandler(Of IEnumerable(Of ChangeStreamDocument(Of T)))
  nameWithType.vb: Watcher(Of T).OnChangesCSDAsync
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Watcher(Of T).OnChangesCSDAsync
- uid: MongoDB.Entities.Watcher`1.OnError
  commentId: E:MongoDB.Entities.Watcher`1.OnError
  id: OnError
  parent: MongoDB.Entities.Watcher`1
  langs:
  - csharp
  - vb
  name: OnError
  nameWithType: Watcher<T>.OnError
  fullName: MongoDB.Entities.Watcher<T>.OnError
  type: Event
  source:
    id: OnError
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Watcher.cs
    startLine: 51
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nThis event is fired when an exception is thrown in the change-stream.\n"
  example: []
  syntax:
    content: public event Action<Exception> OnError
    return:
      type: System.Action{System.Exception}
    content.vb: Public Event OnError As Action(Of Exception)
  nameWithType.vb: Watcher(Of T).OnError
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Watcher(Of T).OnError
- uid: MongoDB.Entities.Watcher`1.OnStop
  commentId: E:MongoDB.Entities.Watcher`1.OnStop
  id: OnStop
  parent: MongoDB.Entities.Watcher`1
  langs:
  - csharp
  - vb
  name: OnStop
  nameWithType: Watcher<T>.OnStop
  fullName: MongoDB.Entities.Watcher<T>.OnStop
  type: Event
  source:
    id: OnStop
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Watcher.cs
    startLine: 56
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nThis event is fired when the internal cursor get closed due to an &apos;invalidate&apos; event or cancellation is requested via the cancellation token.\n"
  example: []
  syntax:
    content: public event Action OnStop
    return:
      type: System.Action
    content.vb: Public Event OnStop As Action
  nameWithType.vb: Watcher(Of T).OnStop
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Watcher(Of T).OnStop
- uid: MongoDB.Entities.Watcher`1.Name
  commentId: P:MongoDB.Entities.Watcher`1.Name
  id: Name
  parent: MongoDB.Entities.Watcher`1
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Watcher<T>.Name
  fullName: MongoDB.Entities.Watcher<T>.Name
  type: Property
  source:
    id: Name
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Watcher.cs
    startLine: 61
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nThe name of this watcher instance\n"
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: MongoDB.Entities.Watcher`1.Name*
  nameWithType.vb: Watcher(Of T).Name
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: MongoDB.Entities.Watcher(Of T).Name
- uid: MongoDB.Entities.Watcher`1.IsInitialized
  commentId: P:MongoDB.Entities.Watcher`1.IsInitialized
  id: IsInitialized
  parent: MongoDB.Entities.Watcher`1
  langs:
  - csharp
  - vb
  name: IsInitialized
  nameWithType: Watcher<T>.IsInitialized
  fullName: MongoDB.Entities.Watcher<T>.IsInitialized
  type: Property
  source:
    id: IsInitialized
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Watcher.cs
    startLine: 66
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nIndicates whether this watcher has already been initialized or not.\n"
  example: []
  syntax:
    content: public bool IsInitialized { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsInitialized As Boolean
  overload: MongoDB.Entities.Watcher`1.IsInitialized*
  nameWithType.vb: Watcher(Of T).IsInitialized
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: MongoDB.Entities.Watcher(Of T).IsInitialized
- uid: MongoDB.Entities.Watcher`1.CanRestart
  commentId: P:MongoDB.Entities.Watcher`1.CanRestart
  id: CanRestart
  parent: MongoDB.Entities.Watcher`1
  langs:
  - csharp
  - vb
  name: CanRestart
  nameWithType: Watcher<T>.CanRestart
  fullName: MongoDB.Entities.Watcher<T>.CanRestart
  type: Property
  source:
    id: CanRestart
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Watcher.cs
    startLine: 72
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nReturns true if watching can be restarted if it was stopped due to an error or invalidate event.\nWill always return false after cancellation is requested via the cancellation token.\n"
  example: []
  syntax:
    content: public bool CanRestart { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property CanRestart As Boolean
  overload: MongoDB.Entities.Watcher`1.CanRestart*
  nameWithType.vb: Watcher(Of T).CanRestart
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: MongoDB.Entities.Watcher(Of T).CanRestart
- uid: MongoDB.Entities.Watcher`1.ResumeToken
  commentId: P:MongoDB.Entities.Watcher`1.ResumeToken
  id: ResumeToken
  parent: MongoDB.Entities.Watcher`1
  langs:
  - csharp
  - vb
  name: ResumeToken
  nameWithType: Watcher<T>.ResumeToken
  fullName: MongoDB.Entities.Watcher<T>.ResumeToken
  type: Property
  source:
    id: ResumeToken
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Watcher.cs
    startLine: 77
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nThe last resume token received from mongodb server. Can be used to resume watching with .StartWithToken() method.\n"
  example: []
  syntax:
    content: public BsonDocument ResumeToken { get; }
    parameters: []
    return:
      type: MongoDB.Bson.BsonDocument
    content.vb: Public ReadOnly Property ResumeToken As BsonDocument
  overload: MongoDB.Entities.Watcher`1.ResumeToken*
  nameWithType.vb: Watcher(Of T).ResumeToken
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: MongoDB.Entities.Watcher(Of T).ResumeToken
- uid: MongoDB.Entities.Watcher`1.Start(MongoDB.Entities.EventType,System.Linq.Expressions.Expression{System.Func{MongoDB.Driver.ChangeStreamDocument{`0},System.Boolean}},System.Int32,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.Watcher`1.Start(MongoDB.Entities.EventType,System.Linq.Expressions.Expression{System.Func{MongoDB.Driver.ChangeStreamDocument{`0},System.Boolean}},System.Int32,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  id: Start(MongoDB.Entities.EventType,System.Linq.Expressions.Expression{System.Func{MongoDB.Driver.ChangeStreamDocument{`0},System.Boolean}},System.Int32,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  parent: MongoDB.Entities.Watcher`1
  langs:
  - csharp
  - vb
  name: Start(EventType, Expression<Func<ChangeStreamDocument<T>, Boolean>>, Int32, Boolean, Boolean, CancellationToken)
  nameWithType: Watcher<T>.Start(EventType, Expression<Func<ChangeStreamDocument<T>, Boolean>>, Int32, Boolean, Boolean, CancellationToken)
  fullName: MongoDB.Entities.Watcher<T>.Start(MongoDB.Entities.EventType, System.Linq.Expressions.Expression<System.Func<MongoDB.Driver.ChangeStreamDocument<T>, System.Boolean>>, System.Int32, System.Boolean, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    id: Start
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Watcher.cs
    startLine: 96
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nStarts the watcher instance with the supplied parameters\n"
  example: []
  syntax:
    content: public void Start(EventType eventTypes, Expression<Func<ChangeStreamDocument<T>, bool>> filter = null, int batchSize = 25, bool onlyGetIDs = false, bool autoResume = true, CancellationToken cancellation = default(CancellationToken))
    parameters:
    - id: eventTypes
      type: MongoDB.Entities.EventType
      description: 'Type of event to watch for. Specify multiple like: EventType.Created | EventType.Updated | EventType.Deleted'
    - id: filter
      type: System.Linq.Expressions.Expression{System.Func{MongoDB.Driver.ChangeStreamDocument{{T}},System.Boolean}}
      description: x => x.FullDocument.Prop1 == &quot;SomeValue&quot;
    - id: batchSize
      type: System.Int32
      description: The max number of entities to receive for a single event occurence
    - id: onlyGetIDs
      type: System.Boolean
      description: Set to true if you don&apos;t want the complete entity details. All properties except the ID will then be null.
    - id: autoResume
      type: System.Boolean
      description: Set to false if you&apos;d like to skip the changes that happened while the watching was stopped. This will also make you unable to retrieve a ResumeToken.
    - id: cancellation
      type: System.Threading.CancellationToken
      description: A cancellation token for ending the watching/change stream
    content.vb: Public Sub Start(eventTypes As EventType, filter As Expression(Of Func(Of ChangeStreamDocument(Of T), Boolean)) = Nothing, batchSize As Integer = 25, onlyGetIDs As Boolean = False, autoResume As Boolean = True, cancellation As CancellationToken = Nothing)
  overload: MongoDB.Entities.Watcher`1.Start*
  nameWithType.vb: Watcher(Of T).Start(EventType, Expression(Of Func(Of ChangeStreamDocument(Of T), Boolean)), Int32, Boolean, Boolean, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Watcher(Of T).Start(MongoDB.Entities.EventType, System.Linq.Expressions.Expression(Of System.Func(Of MongoDB.Driver.ChangeStreamDocument(Of T), System.Boolean)), System.Int32, System.Boolean, System.Boolean, System.Threading.CancellationToken)
  name.vb: Start(EventType, Expression(Of Func(Of ChangeStreamDocument(Of T), Boolean)), Int32, Boolean, Boolean, CancellationToken)
- uid: MongoDB.Entities.Watcher`1.Start(MongoDB.Entities.EventType,System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Linq.Expressions.Expression{System.Func{MongoDB.Driver.ChangeStreamDocument{`0},System.Boolean}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.Watcher`1.Start(MongoDB.Entities.EventType,System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Linq.Expressions.Expression{System.Func{MongoDB.Driver.ChangeStreamDocument{`0},System.Boolean}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  id: Start(MongoDB.Entities.EventType,System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Linq.Expressions.Expression{System.Func{MongoDB.Driver.ChangeStreamDocument{`0},System.Boolean}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  parent: MongoDB.Entities.Watcher`1
  langs:
  - csharp
  - vb
  name: Start(EventType, Expression<Func<T, T>>, Expression<Func<ChangeStreamDocument<T>, Boolean>>, Int32, Boolean, CancellationToken)
  nameWithType: Watcher<T>.Start(EventType, Expression<Func<T, T>>, Expression<Func<ChangeStreamDocument<T>, Boolean>>, Int32, Boolean, CancellationToken)
  fullName: MongoDB.Entities.Watcher<T>.Start(MongoDB.Entities.EventType, System.Linq.Expressions.Expression<System.Func<T, T>>, System.Linq.Expressions.Expression<System.Func<MongoDB.Driver.ChangeStreamDocument<T>, System.Boolean>>, System.Int32, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    id: Start
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Watcher.cs
    startLine: 114
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nStarts the watcher instance with the supplied parameters. Supports projection.\n"
  example: []
  syntax:
    content: public void Start(EventType eventTypes, Expression<Func<T, T>> projection, Expression<Func<ChangeStreamDocument<T>, bool>> filter = null, int batchSize = 25, bool autoResume = true, CancellationToken cancellation = default(CancellationToken))
    parameters:
    - id: eventTypes
      type: MongoDB.Entities.EventType
      description: 'Type of event to watch for. Specify multiple like: EventType.Created | EventType.Updated | EventType.Deleted'
    - id: projection
      type: System.Linq.Expressions.Expression{System.Func{{T},{T}}}
      description: A projection expression for the entity
    - id: filter
      type: System.Linq.Expressions.Expression{System.Func{MongoDB.Driver.ChangeStreamDocument{{T}},System.Boolean}}
      description: x => x.FullDocument.Prop1 == &quot;SomeValue&quot;
    - id: batchSize
      type: System.Int32
      description: The max number of entities to receive for a single event occurence
    - id: autoResume
      type: System.Boolean
      description: Set to false if you&apos;d like to skip the changes that happened while the watching was stopped. This will also make you unable to retrieve a ResumeToken.
    - id: cancellation
      type: System.Threading.CancellationToken
      description: A cancellation token for ending the watching/change stream
    content.vb: Public Sub Start(eventTypes As EventType, projection As Expression(Of Func(Of T, T)), filter As Expression(Of Func(Of ChangeStreamDocument(Of T), Boolean)) = Nothing, batchSize As Integer = 25, autoResume As Boolean = True, cancellation As CancellationToken = Nothing)
  overload: MongoDB.Entities.Watcher`1.Start*
  nameWithType.vb: Watcher(Of T).Start(EventType, Expression(Of Func(Of T, T)), Expression(Of Func(Of ChangeStreamDocument(Of T), Boolean)), Int32, Boolean, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Watcher(Of T).Start(MongoDB.Entities.EventType, System.Linq.Expressions.Expression(Of System.Func(Of T, T)), System.Linq.Expressions.Expression(Of System.Func(Of MongoDB.Driver.ChangeStreamDocument(Of T), System.Boolean)), System.Int32, System.Boolean, System.Threading.CancellationToken)
  name.vb: Start(EventType, Expression(Of Func(Of T, T)), Expression(Of Func(Of ChangeStreamDocument(Of T), Boolean)), Int32, Boolean, CancellationToken)
- uid: MongoDB.Entities.Watcher`1.Start(MongoDB.Entities.EventType,System.Func{MongoDB.Driver.FilterDefinitionBuilder{MongoDB.Driver.ChangeStreamDocument{`0}},MongoDB.Driver.FilterDefinition{MongoDB.Driver.ChangeStreamDocument{`0}}},System.Int32,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.Watcher`1.Start(MongoDB.Entities.EventType,System.Func{MongoDB.Driver.FilterDefinitionBuilder{MongoDB.Driver.ChangeStreamDocument{`0}},MongoDB.Driver.FilterDefinition{MongoDB.Driver.ChangeStreamDocument{`0}}},System.Int32,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  id: Start(MongoDB.Entities.EventType,System.Func{MongoDB.Driver.FilterDefinitionBuilder{MongoDB.Driver.ChangeStreamDocument{`0}},MongoDB.Driver.FilterDefinition{MongoDB.Driver.ChangeStreamDocument{`0}}},System.Int32,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  parent: MongoDB.Entities.Watcher`1
  langs:
  - csharp
  - vb
  name: Start(EventType, Func<FilterDefinitionBuilder<ChangeStreamDocument<T>>, FilterDefinition<ChangeStreamDocument<T>>>, Int32, Boolean, Boolean, CancellationToken)
  nameWithType: Watcher<T>.Start(EventType, Func<FilterDefinitionBuilder<ChangeStreamDocument<T>>, FilterDefinition<ChangeStreamDocument<T>>>, Int32, Boolean, Boolean, CancellationToken)
  fullName: MongoDB.Entities.Watcher<T>.Start(MongoDB.Entities.EventType, System.Func<MongoDB.Driver.FilterDefinitionBuilder<MongoDB.Driver.ChangeStreamDocument<T>>, MongoDB.Driver.FilterDefinition<MongoDB.Driver.ChangeStreamDocument<T>>>, System.Int32, System.Boolean, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    id: Start
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Watcher.cs
    startLine: 132
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nStarts the watcher instance with the supplied parameters\n"
  example: []
  syntax:
    content: public void Start(EventType eventTypes, Func<FilterDefinitionBuilder<ChangeStreamDocument<T>>, FilterDefinition<ChangeStreamDocument<T>>> filter, int batchSize = 25, bool onlyGetIDs = false, bool autoResume = true, CancellationToken cancellation = default(CancellationToken))
    parameters:
    - id: eventTypes
      type: MongoDB.Entities.EventType
      description: 'Type of event to watch for. Specify multiple like: EventType.Created | EventType.Updated | EventType.Deleted'
    - id: filter
      type: System.Func{MongoDB.Driver.FilterDefinitionBuilder{MongoDB.Driver.ChangeStreamDocument{{T}}},MongoDB.Driver.FilterDefinition{MongoDB.Driver.ChangeStreamDocument{{T}}}}
      description: b => b.Eq(d => d.FullDocument.Prop1, &quot;value&quot;)
    - id: batchSize
      type: System.Int32
      description: The max number of entities to receive for a single event occurence
    - id: onlyGetIDs
      type: System.Boolean
      description: Set to true if you don&apos;t want the complete entity details. All properties except the ID will then be null.
    - id: autoResume
      type: System.Boolean
      description: Set to false if you&apos;d like to skip the changes that happened while the watching was stopped. This will also make you unable to retrieve a ResumeToken.
    - id: cancellation
      type: System.Threading.CancellationToken
      description: A cancellation token for ending the watching/change stream
    content.vb: Public Sub Start(eventTypes As EventType, filter As Func(Of FilterDefinitionBuilder(Of ChangeStreamDocument(Of T)), FilterDefinition(Of ChangeStreamDocument(Of T))), batchSize As Integer = 25, onlyGetIDs As Boolean = False, autoResume As Boolean = True, cancellation As CancellationToken = Nothing)
  overload: MongoDB.Entities.Watcher`1.Start*
  nameWithType.vb: Watcher(Of T).Start(EventType, Func(Of FilterDefinitionBuilder(Of ChangeStreamDocument(Of T)), FilterDefinition(Of ChangeStreamDocument(Of T))), Int32, Boolean, Boolean, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Watcher(Of T).Start(MongoDB.Entities.EventType, System.Func(Of MongoDB.Driver.FilterDefinitionBuilder(Of MongoDB.Driver.ChangeStreamDocument(Of T)), MongoDB.Driver.FilterDefinition(Of MongoDB.Driver.ChangeStreamDocument(Of T))), System.Int32, System.Boolean, System.Boolean, System.Threading.CancellationToken)
  name.vb: Start(EventType, Func(Of FilterDefinitionBuilder(Of ChangeStreamDocument(Of T)), FilterDefinition(Of ChangeStreamDocument(Of T))), Int32, Boolean, Boolean, CancellationToken)
- uid: MongoDB.Entities.Watcher`1.Start(MongoDB.Entities.EventType,System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Func{MongoDB.Driver.FilterDefinitionBuilder{MongoDB.Driver.ChangeStreamDocument{`0}},MongoDB.Driver.FilterDefinition{MongoDB.Driver.ChangeStreamDocument{`0}}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.Watcher`1.Start(MongoDB.Entities.EventType,System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Func{MongoDB.Driver.FilterDefinitionBuilder{MongoDB.Driver.ChangeStreamDocument{`0}},MongoDB.Driver.FilterDefinition{MongoDB.Driver.ChangeStreamDocument{`0}}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  id: Start(MongoDB.Entities.EventType,System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Func{MongoDB.Driver.FilterDefinitionBuilder{MongoDB.Driver.ChangeStreamDocument{`0}},MongoDB.Driver.FilterDefinition{MongoDB.Driver.ChangeStreamDocument{`0}}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  parent: MongoDB.Entities.Watcher`1
  langs:
  - csharp
  - vb
  name: Start(EventType, Expression<Func<T, T>>, Func<FilterDefinitionBuilder<ChangeStreamDocument<T>>, FilterDefinition<ChangeStreamDocument<T>>>, Int32, Boolean, CancellationToken)
  nameWithType: Watcher<T>.Start(EventType, Expression<Func<T, T>>, Func<FilterDefinitionBuilder<ChangeStreamDocument<T>>, FilterDefinition<ChangeStreamDocument<T>>>, Int32, Boolean, CancellationToken)
  fullName: MongoDB.Entities.Watcher<T>.Start(MongoDB.Entities.EventType, System.Linq.Expressions.Expression<System.Func<T, T>>, System.Func<MongoDB.Driver.FilterDefinitionBuilder<MongoDB.Driver.ChangeStreamDocument<T>>, MongoDB.Driver.FilterDefinition<MongoDB.Driver.ChangeStreamDocument<T>>>, System.Int32, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    id: Start
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Watcher.cs
    startLine: 150
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nStarts the watcher instance with the supplied parameters. Supports projection.\n"
  example: []
  syntax:
    content: public void Start(EventType eventTypes, Expression<Func<T, T>> projection, Func<FilterDefinitionBuilder<ChangeStreamDocument<T>>, FilterDefinition<ChangeStreamDocument<T>>> filter, int batchSize = 25, bool autoResume = true, CancellationToken cancellation = default(CancellationToken))
    parameters:
    - id: eventTypes
      type: MongoDB.Entities.EventType
      description: 'Type of event to watch for. Specify multiple like: EventType.Created | EventType.Updated | EventType.Deleted'
    - id: projection
      type: System.Linq.Expressions.Expression{System.Func{{T},{T}}}
      description: A projection expression for the entity
    - id: filter
      type: System.Func{MongoDB.Driver.FilterDefinitionBuilder{MongoDB.Driver.ChangeStreamDocument{{T}}},MongoDB.Driver.FilterDefinition{MongoDB.Driver.ChangeStreamDocument{{T}}}}
      description: b => b.Eq(d => d.FullDocument.Prop1, &quot;value&quot;)
    - id: batchSize
      type: System.Int32
      description: The max number of entities to receive for a single event occurence
    - id: autoResume
      type: System.Boolean
      description: Set to false if you&apos;d like to skip the changes that happened while the watching was stopped. This will also make you unable to retrieve a ResumeToken.
    - id: cancellation
      type: System.Threading.CancellationToken
      description: A cancellation token for ending the watching/change stream
    content.vb: Public Sub Start(eventTypes As EventType, projection As Expression(Of Func(Of T, T)), filter As Func(Of FilterDefinitionBuilder(Of ChangeStreamDocument(Of T)), FilterDefinition(Of ChangeStreamDocument(Of T))), batchSize As Integer = 25, autoResume As Boolean = True, cancellation As CancellationToken = Nothing)
  overload: MongoDB.Entities.Watcher`1.Start*
  nameWithType.vb: Watcher(Of T).Start(EventType, Expression(Of Func(Of T, T)), Func(Of FilterDefinitionBuilder(Of ChangeStreamDocument(Of T)), FilterDefinition(Of ChangeStreamDocument(Of T))), Int32, Boolean, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Watcher(Of T).Start(MongoDB.Entities.EventType, System.Linq.Expressions.Expression(Of System.Func(Of T, T)), System.Func(Of MongoDB.Driver.FilterDefinitionBuilder(Of MongoDB.Driver.ChangeStreamDocument(Of T)), MongoDB.Driver.FilterDefinition(Of MongoDB.Driver.ChangeStreamDocument(Of T))), System.Int32, System.Boolean, System.Threading.CancellationToken)
  name.vb: Start(EventType, Expression(Of Func(Of T, T)), Func(Of FilterDefinitionBuilder(Of ChangeStreamDocument(Of T)), FilterDefinition(Of ChangeStreamDocument(Of T))), Int32, Boolean, CancellationToken)
- uid: MongoDB.Entities.Watcher`1.StartWithToken(MongoDB.Bson.BsonDocument,MongoDB.Entities.EventType,System.Linq.Expressions.Expression{System.Func{MongoDB.Driver.ChangeStreamDocument{`0},System.Boolean}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.Watcher`1.StartWithToken(MongoDB.Bson.BsonDocument,MongoDB.Entities.EventType,System.Linq.Expressions.Expression{System.Func{MongoDB.Driver.ChangeStreamDocument{`0},System.Boolean}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  id: StartWithToken(MongoDB.Bson.BsonDocument,MongoDB.Entities.EventType,System.Linq.Expressions.Expression{System.Func{MongoDB.Driver.ChangeStreamDocument{`0},System.Boolean}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  parent: MongoDB.Entities.Watcher`1
  langs:
  - csharp
  - vb
  name: StartWithToken(BsonDocument, EventType, Expression<Func<ChangeStreamDocument<T>, Boolean>>, Int32, Boolean, CancellationToken)
  nameWithType: Watcher<T>.StartWithToken(BsonDocument, EventType, Expression<Func<ChangeStreamDocument<T>, Boolean>>, Int32, Boolean, CancellationToken)
  fullName: MongoDB.Entities.Watcher<T>.StartWithToken(MongoDB.Bson.BsonDocument, MongoDB.Entities.EventType, System.Linq.Expressions.Expression<System.Func<MongoDB.Driver.ChangeStreamDocument<T>, System.Boolean>>, System.Int32, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    id: StartWithToken
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Watcher.cs
    startLine: 168
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nStarts the watcher instance with the supplied configuration\n"
  example: []
  syntax:
    content: public void StartWithToken(BsonDocument resumeToken, EventType eventTypes, Expression<Func<ChangeStreamDocument<T>, bool>> filter = null, int batchSize = 25, bool onlyGetIDs = false, CancellationToken cancellation = default(CancellationToken))
    parameters:
    - id: resumeToken
      type: MongoDB.Bson.BsonDocument
      description: A resume token to start receiving changes after some point back in time
    - id: eventTypes
      type: MongoDB.Entities.EventType
      description: 'Type of event to watch for. Specify multiple like: EventType.Created | EventType.Updated | EventType.Deleted'
    - id: filter
      type: System.Linq.Expressions.Expression{System.Func{MongoDB.Driver.ChangeStreamDocument{{T}},System.Boolean}}
      description: x => x.FullDocument.Prop1 == &quot;SomeValue&quot;
    - id: batchSize
      type: System.Int32
      description: The max number of entities to receive for a single event occurence
    - id: onlyGetIDs
      type: System.Boolean
      description: Set to true if you don&apos;t want the complete entity details. All properties except the ID will then be null.
    - id: cancellation
      type: System.Threading.CancellationToken
      description: A cancellation token for ending the watching/change stream
    content.vb: Public Sub StartWithToken(resumeToken As BsonDocument, eventTypes As EventType, filter As Expression(Of Func(Of ChangeStreamDocument(Of T), Boolean)) = Nothing, batchSize As Integer = 25, onlyGetIDs As Boolean = False, cancellation As CancellationToken = Nothing)
  overload: MongoDB.Entities.Watcher`1.StartWithToken*
  nameWithType.vb: Watcher(Of T).StartWithToken(BsonDocument, EventType, Expression(Of Func(Of ChangeStreamDocument(Of T), Boolean)), Int32, Boolean, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Watcher(Of T).StartWithToken(MongoDB.Bson.BsonDocument, MongoDB.Entities.EventType, System.Linq.Expressions.Expression(Of System.Func(Of MongoDB.Driver.ChangeStreamDocument(Of T), System.Boolean)), System.Int32, System.Boolean, System.Threading.CancellationToken)
  name.vb: StartWithToken(BsonDocument, EventType, Expression(Of Func(Of ChangeStreamDocument(Of T), Boolean)), Int32, Boolean, CancellationToken)
- uid: MongoDB.Entities.Watcher`1.StartWithToken(MongoDB.Bson.BsonDocument,MongoDB.Entities.EventType,System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Linq.Expressions.Expression{System.Func{MongoDB.Driver.ChangeStreamDocument{`0},System.Boolean}},System.Int32,System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.Watcher`1.StartWithToken(MongoDB.Bson.BsonDocument,MongoDB.Entities.EventType,System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Linq.Expressions.Expression{System.Func{MongoDB.Driver.ChangeStreamDocument{`0},System.Boolean}},System.Int32,System.Threading.CancellationToken)
  id: StartWithToken(MongoDB.Bson.BsonDocument,MongoDB.Entities.EventType,System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Linq.Expressions.Expression{System.Func{MongoDB.Driver.ChangeStreamDocument{`0},System.Boolean}},System.Int32,System.Threading.CancellationToken)
  parent: MongoDB.Entities.Watcher`1
  langs:
  - csharp
  - vb
  name: StartWithToken(BsonDocument, EventType, Expression<Func<T, T>>, Expression<Func<ChangeStreamDocument<T>, Boolean>>, Int32, CancellationToken)
  nameWithType: Watcher<T>.StartWithToken(BsonDocument, EventType, Expression<Func<T, T>>, Expression<Func<ChangeStreamDocument<T>, Boolean>>, Int32, CancellationToken)
  fullName: MongoDB.Entities.Watcher<T>.StartWithToken(MongoDB.Bson.BsonDocument, MongoDB.Entities.EventType, System.Linq.Expressions.Expression<System.Func<T, T>>, System.Linq.Expressions.Expression<System.Func<MongoDB.Driver.ChangeStreamDocument<T>, System.Boolean>>, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    id: StartWithToken
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Watcher.cs
    startLine: 186
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nStarts the watcher instance with the supplied configuration. Supports projection.\n"
  example: []
  syntax:
    content: public void StartWithToken(BsonDocument resumeToken, EventType eventTypes, Expression<Func<T, T>> projection, Expression<Func<ChangeStreamDocument<T>, bool>> filter = null, int batchSize = 25, CancellationToken cancellation = default(CancellationToken))
    parameters:
    - id: resumeToken
      type: MongoDB.Bson.BsonDocument
      description: A resume token to start receiving changes after some point back in time
    - id: eventTypes
      type: MongoDB.Entities.EventType
      description: 'Type of event to watch for. Specify multiple like: EventType.Created | EventType.Updated | EventType.Deleted'
    - id: projection
      type: System.Linq.Expressions.Expression{System.Func{{T},{T}}}
      description: A projection expression for the entity
    - id: filter
      type: System.Linq.Expressions.Expression{System.Func{MongoDB.Driver.ChangeStreamDocument{{T}},System.Boolean}}
      description: x => x.FullDocument.Prop1 == &quot;SomeValue&quot;
    - id: batchSize
      type: System.Int32
      description: The max number of entities to receive for a single event occurence
    - id: cancellation
      type: System.Threading.CancellationToken
      description: A cancellation token for ending the watching/change stream
    content.vb: Public Sub StartWithToken(resumeToken As BsonDocument, eventTypes As EventType, projection As Expression(Of Func(Of T, T)), filter As Expression(Of Func(Of ChangeStreamDocument(Of T), Boolean)) = Nothing, batchSize As Integer = 25, cancellation As CancellationToken = Nothing)
  overload: MongoDB.Entities.Watcher`1.StartWithToken*
  nameWithType.vb: Watcher(Of T).StartWithToken(BsonDocument, EventType, Expression(Of Func(Of T, T)), Expression(Of Func(Of ChangeStreamDocument(Of T), Boolean)), Int32, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Watcher(Of T).StartWithToken(MongoDB.Bson.BsonDocument, MongoDB.Entities.EventType, System.Linq.Expressions.Expression(Of System.Func(Of T, T)), System.Linq.Expressions.Expression(Of System.Func(Of MongoDB.Driver.ChangeStreamDocument(Of T), System.Boolean)), System.Int32, System.Threading.CancellationToken)
  name.vb: StartWithToken(BsonDocument, EventType, Expression(Of Func(Of T, T)), Expression(Of Func(Of ChangeStreamDocument(Of T), Boolean)), Int32, CancellationToken)
- uid: MongoDB.Entities.Watcher`1.StartWithToken(MongoDB.Bson.BsonDocument,MongoDB.Entities.EventType,System.Func{MongoDB.Driver.FilterDefinitionBuilder{MongoDB.Driver.ChangeStreamDocument{`0}},MongoDB.Driver.FilterDefinition{MongoDB.Driver.ChangeStreamDocument{`0}}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.Watcher`1.StartWithToken(MongoDB.Bson.BsonDocument,MongoDB.Entities.EventType,System.Func{MongoDB.Driver.FilterDefinitionBuilder{MongoDB.Driver.ChangeStreamDocument{`0}},MongoDB.Driver.FilterDefinition{MongoDB.Driver.ChangeStreamDocument{`0}}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  id: StartWithToken(MongoDB.Bson.BsonDocument,MongoDB.Entities.EventType,System.Func{MongoDB.Driver.FilterDefinitionBuilder{MongoDB.Driver.ChangeStreamDocument{`0}},MongoDB.Driver.FilterDefinition{MongoDB.Driver.ChangeStreamDocument{`0}}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  parent: MongoDB.Entities.Watcher`1
  langs:
  - csharp
  - vb
  name: StartWithToken(BsonDocument, EventType, Func<FilterDefinitionBuilder<ChangeStreamDocument<T>>, FilterDefinition<ChangeStreamDocument<T>>>, Int32, Boolean, CancellationToken)
  nameWithType: Watcher<T>.StartWithToken(BsonDocument, EventType, Func<FilterDefinitionBuilder<ChangeStreamDocument<T>>, FilterDefinition<ChangeStreamDocument<T>>>, Int32, Boolean, CancellationToken)
  fullName: MongoDB.Entities.Watcher<T>.StartWithToken(MongoDB.Bson.BsonDocument, MongoDB.Entities.EventType, System.Func<MongoDB.Driver.FilterDefinitionBuilder<MongoDB.Driver.ChangeStreamDocument<T>>, MongoDB.Driver.FilterDefinition<MongoDB.Driver.ChangeStreamDocument<T>>>, System.Int32, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    id: StartWithToken
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Watcher.cs
    startLine: 204
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nStarts the watcher instance with the supplied configuration\n"
  example: []
  syntax:
    content: public void StartWithToken(BsonDocument resumeToken, EventType eventTypes, Func<FilterDefinitionBuilder<ChangeStreamDocument<T>>, FilterDefinition<ChangeStreamDocument<T>>> filter, int batchSize = 25, bool onlyGetIDs = false, CancellationToken cancellation = default(CancellationToken))
    parameters:
    - id: resumeToken
      type: MongoDB.Bson.BsonDocument
      description: A resume token to start receiving changes after some point back in time
    - id: eventTypes
      type: MongoDB.Entities.EventType
      description: 'Type of event to watch for. Specify multiple like: EventType.Created | EventType.Updated | EventType.Deleted'
    - id: filter
      type: System.Func{MongoDB.Driver.FilterDefinitionBuilder{MongoDB.Driver.ChangeStreamDocument{{T}}},MongoDB.Driver.FilterDefinition{MongoDB.Driver.ChangeStreamDocument{{T}}}}
      description: b => b.Eq(d => d.FullDocument.Prop1, &quot;value&quot;)
    - id: batchSize
      type: System.Int32
      description: The max number of entities to receive for a single event occurence
    - id: onlyGetIDs
      type: System.Boolean
      description: Set to true if you don&apos;t want the complete entity details. All properties except the ID will then be null.
    - id: cancellation
      type: System.Threading.CancellationToken
      description: A cancellation token for ending the watching/change stream
    content.vb: Public Sub StartWithToken(resumeToken As BsonDocument, eventTypes As EventType, filter As Func(Of FilterDefinitionBuilder(Of ChangeStreamDocument(Of T)), FilterDefinition(Of ChangeStreamDocument(Of T))), batchSize As Integer = 25, onlyGetIDs As Boolean = False, cancellation As CancellationToken = Nothing)
  overload: MongoDB.Entities.Watcher`1.StartWithToken*
  nameWithType.vb: Watcher(Of T).StartWithToken(BsonDocument, EventType, Func(Of FilterDefinitionBuilder(Of ChangeStreamDocument(Of T)), FilterDefinition(Of ChangeStreamDocument(Of T))), Int32, Boolean, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Watcher(Of T).StartWithToken(MongoDB.Bson.BsonDocument, MongoDB.Entities.EventType, System.Func(Of MongoDB.Driver.FilterDefinitionBuilder(Of MongoDB.Driver.ChangeStreamDocument(Of T)), MongoDB.Driver.FilterDefinition(Of MongoDB.Driver.ChangeStreamDocument(Of T))), System.Int32, System.Boolean, System.Threading.CancellationToken)
  name.vb: StartWithToken(BsonDocument, EventType, Func(Of FilterDefinitionBuilder(Of ChangeStreamDocument(Of T)), FilterDefinition(Of ChangeStreamDocument(Of T))), Int32, Boolean, CancellationToken)
- uid: MongoDB.Entities.Watcher`1.StartWithToken(MongoDB.Bson.BsonDocument,MongoDB.Entities.EventType,System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Func{MongoDB.Driver.FilterDefinitionBuilder{MongoDB.Driver.ChangeStreamDocument{`0}},MongoDB.Driver.FilterDefinition{MongoDB.Driver.ChangeStreamDocument{`0}}},System.Int32,System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.Watcher`1.StartWithToken(MongoDB.Bson.BsonDocument,MongoDB.Entities.EventType,System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Func{MongoDB.Driver.FilterDefinitionBuilder{MongoDB.Driver.ChangeStreamDocument{`0}},MongoDB.Driver.FilterDefinition{MongoDB.Driver.ChangeStreamDocument{`0}}},System.Int32,System.Threading.CancellationToken)
  id: StartWithToken(MongoDB.Bson.BsonDocument,MongoDB.Entities.EventType,System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Func{MongoDB.Driver.FilterDefinitionBuilder{MongoDB.Driver.ChangeStreamDocument{`0}},MongoDB.Driver.FilterDefinition{MongoDB.Driver.ChangeStreamDocument{`0}}},System.Int32,System.Threading.CancellationToken)
  parent: MongoDB.Entities.Watcher`1
  langs:
  - csharp
  - vb
  name: StartWithToken(BsonDocument, EventType, Expression<Func<T, T>>, Func<FilterDefinitionBuilder<ChangeStreamDocument<T>>, FilterDefinition<ChangeStreamDocument<T>>>, Int32, CancellationToken)
  nameWithType: Watcher<T>.StartWithToken(BsonDocument, EventType, Expression<Func<T, T>>, Func<FilterDefinitionBuilder<ChangeStreamDocument<T>>, FilterDefinition<ChangeStreamDocument<T>>>, Int32, CancellationToken)
  fullName: MongoDB.Entities.Watcher<T>.StartWithToken(MongoDB.Bson.BsonDocument, MongoDB.Entities.EventType, System.Linq.Expressions.Expression<System.Func<T, T>>, System.Func<MongoDB.Driver.FilterDefinitionBuilder<MongoDB.Driver.ChangeStreamDocument<T>>, MongoDB.Driver.FilterDefinition<MongoDB.Driver.ChangeStreamDocument<T>>>, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    id: StartWithToken
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Watcher.cs
    startLine: 222
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nStarts the watcher instance with the supplied configuration. Supports projection.\n"
  example: []
  syntax:
    content: public void StartWithToken(BsonDocument resumeToken, EventType eventTypes, Expression<Func<T, T>> projection, Func<FilterDefinitionBuilder<ChangeStreamDocument<T>>, FilterDefinition<ChangeStreamDocument<T>>> filter, int batchSize = 25, CancellationToken cancellation = default(CancellationToken))
    parameters:
    - id: resumeToken
      type: MongoDB.Bson.BsonDocument
      description: A resume token to start receiving changes after some point back in time
    - id: eventTypes
      type: MongoDB.Entities.EventType
      description: 'Type of event to watch for. Specify multiple like: EventType.Created | EventType.Updated | EventType.Deleted'
    - id: projection
      type: System.Linq.Expressions.Expression{System.Func{{T},{T}}}
      description: A projection expression for the entity
    - id: filter
      type: System.Func{MongoDB.Driver.FilterDefinitionBuilder{MongoDB.Driver.ChangeStreamDocument{{T}}},MongoDB.Driver.FilterDefinition{MongoDB.Driver.ChangeStreamDocument{{T}}}}
      description: b => b.Eq(d => d.FullDocument.Prop1, &quot;value&quot;)
    - id: batchSize
      type: System.Int32
      description: The max number of entities to receive for a single event occurence
    - id: cancellation
      type: System.Threading.CancellationToken
      description: A cancellation token for ending the watching/change stream
    content.vb: Public Sub StartWithToken(resumeToken As BsonDocument, eventTypes As EventType, projection As Expression(Of Func(Of T, T)), filter As Func(Of FilterDefinitionBuilder(Of ChangeStreamDocument(Of T)), FilterDefinition(Of ChangeStreamDocument(Of T))), batchSize As Integer = 25, cancellation As CancellationToken = Nothing)
  overload: MongoDB.Entities.Watcher`1.StartWithToken*
  nameWithType.vb: Watcher(Of T).StartWithToken(BsonDocument, EventType, Expression(Of Func(Of T, T)), Func(Of FilterDefinitionBuilder(Of ChangeStreamDocument(Of T)), FilterDefinition(Of ChangeStreamDocument(Of T))), Int32, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Watcher(Of T).StartWithToken(MongoDB.Bson.BsonDocument, MongoDB.Entities.EventType, System.Linq.Expressions.Expression(Of System.Func(Of T, T)), System.Func(Of MongoDB.Driver.FilterDefinitionBuilder(Of MongoDB.Driver.ChangeStreamDocument(Of T)), MongoDB.Driver.FilterDefinition(Of MongoDB.Driver.ChangeStreamDocument(Of T))), System.Int32, System.Threading.CancellationToken)
  name.vb: StartWithToken(BsonDocument, EventType, Expression(Of Func(Of T, T)), Func(Of FilterDefinitionBuilder(Of ChangeStreamDocument(Of T)), FilterDefinition(Of ChangeStreamDocument(Of T))), Int32, CancellationToken)
- uid: MongoDB.Entities.Watcher`1.ReStart(MongoDB.Bson.BsonDocument)
  commentId: M:MongoDB.Entities.Watcher`1.ReStart(MongoDB.Bson.BsonDocument)
  id: ReStart(MongoDB.Bson.BsonDocument)
  parent: MongoDB.Entities.Watcher`1
  langs:
  - csharp
  - vb
  name: ReStart(BsonDocument)
  nameWithType: Watcher<T>.ReStart(BsonDocument)
  fullName: MongoDB.Entities.Watcher<T>.ReStart(MongoDB.Bson.BsonDocument)
  type: Method
  source:
    id: ReStart
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Watcher.cs
    startLine: 346
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nIf the watcher stopped due to an error or invalidate event, you can try to restart the watching again with this method.\n"
  example: []
  syntax:
    content: public void ReStart(BsonDocument resumeToken = null)
    parameters:
    - id: resumeToken
      type: MongoDB.Bson.BsonDocument
      description: An optional resume token to restart watching with
    content.vb: Public Sub ReStart(resumeToken As BsonDocument = Nothing)
  overload: MongoDB.Entities.Watcher`1.ReStart*
  nameWithType.vb: Watcher(Of T).ReStart(BsonDocument)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Watcher(Of T).ReStart(MongoDB.Bson.BsonDocument)
references:
- uid: MongoDB.Entities
  commentId: N:MongoDB.Entities
  name: MongoDB.Entities
  nameWithType: MongoDB.Entities
  fullName: MongoDB.Entities
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Action{System.Collections.Generic.IEnumerable{{T}}}
  commentId: T:System.Action{System.Collections.Generic.IEnumerable{`0}}
  parent: System
  definition: System.Action`1
  name: Action<IEnumerable<T>>
  nameWithType: Action<IEnumerable<T>>
  fullName: System.Action<System.Collections.Generic.IEnumerable<T>>
  nameWithType.vb: Action(Of IEnumerable(Of T))
  fullName.vb: System.Action(Of System.Collections.Generic.IEnumerable(Of T))
  name.vb: Action(Of IEnumerable(Of T))
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.AsyncEventHandler{System.Collections.Generic.IEnumerable{{T}}}
  commentId: T:MongoDB.Entities.AsyncEventHandler{System.Collections.Generic.IEnumerable{`0}}
  parent: MongoDB.Entities
  definition: MongoDB.Entities.AsyncEventHandler`1
  name: AsyncEventHandler<IEnumerable<T>>
  nameWithType: AsyncEventHandler<IEnumerable<T>>
  fullName: MongoDB.Entities.AsyncEventHandler<System.Collections.Generic.IEnumerable<T>>
  nameWithType.vb: AsyncEventHandler(Of IEnumerable(Of T))
  fullName.vb: MongoDB.Entities.AsyncEventHandler(Of System.Collections.Generic.IEnumerable(Of T))
  name.vb: AsyncEventHandler(Of IEnumerable(Of T))
  spec.csharp:
  - uid: MongoDB.Entities.AsyncEventHandler`1
    name: AsyncEventHandler
    nameWithType: AsyncEventHandler
    fullName: MongoDB.Entities.AsyncEventHandler
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.AsyncEventHandler`1
    name: AsyncEventHandler
    nameWithType: AsyncEventHandler
    fullName: MongoDB.Entities.AsyncEventHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.AsyncEventHandler`1
  commentId: T:MongoDB.Entities.AsyncEventHandler`1
  name: AsyncEventHandler<TEventArgs>
  nameWithType: AsyncEventHandler<TEventArgs>
  fullName: MongoDB.Entities.AsyncEventHandler<TEventArgs>
  nameWithType.vb: AsyncEventHandler(Of TEventArgs)
  fullName.vb: MongoDB.Entities.AsyncEventHandler(Of TEventArgs)
  name.vb: AsyncEventHandler(Of TEventArgs)
  spec.csharp:
  - uid: MongoDB.Entities.AsyncEventHandler`1
    name: AsyncEventHandler
    nameWithType: AsyncEventHandler
    fullName: MongoDB.Entities.AsyncEventHandler
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.AsyncEventHandler`1
    name: AsyncEventHandler
    nameWithType: AsyncEventHandler
    fullName: MongoDB.Entities.AsyncEventHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{System.Collections.Generic.IEnumerable{MongoDB.Driver.ChangeStreamDocument{{T}}}}
  commentId: T:System.Action{System.Collections.Generic.IEnumerable{MongoDB.Driver.ChangeStreamDocument{`0}}}
  parent: System
  definition: System.Action`1
  name: Action<IEnumerable<ChangeStreamDocument<T>>>
  nameWithType: Action<IEnumerable<ChangeStreamDocument<T>>>
  fullName: System.Action<System.Collections.Generic.IEnumerable<MongoDB.Driver.ChangeStreamDocument<T>>>
  nameWithType.vb: Action(Of IEnumerable(Of ChangeStreamDocument(Of T)))
  fullName.vb: System.Action(Of System.Collections.Generic.IEnumerable(Of MongoDB.Driver.ChangeStreamDocument(Of T)))
  name.vb: Action(Of IEnumerable(Of ChangeStreamDocument(Of T)))
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Driver.ChangeStreamDocument`1
    name: ChangeStreamDocument
    nameWithType: ChangeStreamDocument
    fullName: MongoDB.Driver.ChangeStreamDocument
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Driver.ChangeStreamDocument`1
    name: ChangeStreamDocument
    nameWithType: ChangeStreamDocument
    fullName: MongoDB.Driver.ChangeStreamDocument
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.AsyncEventHandler{System.Collections.Generic.IEnumerable{MongoDB.Driver.ChangeStreamDocument{{T}}}}
  commentId: T:MongoDB.Entities.AsyncEventHandler{System.Collections.Generic.IEnumerable{MongoDB.Driver.ChangeStreamDocument{`0}}}
  parent: MongoDB.Entities
  definition: MongoDB.Entities.AsyncEventHandler`1
  name: AsyncEventHandler<IEnumerable<ChangeStreamDocument<T>>>
  nameWithType: AsyncEventHandler<IEnumerable<ChangeStreamDocument<T>>>
  fullName: MongoDB.Entities.AsyncEventHandler<System.Collections.Generic.IEnumerable<MongoDB.Driver.ChangeStreamDocument<T>>>
  nameWithType.vb: AsyncEventHandler(Of IEnumerable(Of ChangeStreamDocument(Of T)))
  fullName.vb: MongoDB.Entities.AsyncEventHandler(Of System.Collections.Generic.IEnumerable(Of MongoDB.Driver.ChangeStreamDocument(Of T)))
  name.vb: AsyncEventHandler(Of IEnumerable(Of ChangeStreamDocument(Of T)))
  spec.csharp:
  - uid: MongoDB.Entities.AsyncEventHandler`1
    name: AsyncEventHandler
    nameWithType: AsyncEventHandler
    fullName: MongoDB.Entities.AsyncEventHandler
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Driver.ChangeStreamDocument`1
    name: ChangeStreamDocument
    nameWithType: ChangeStreamDocument
    fullName: MongoDB.Driver.ChangeStreamDocument
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.AsyncEventHandler`1
    name: AsyncEventHandler
    nameWithType: AsyncEventHandler
    fullName: MongoDB.Entities.AsyncEventHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Driver.ChangeStreamDocument`1
    name: ChangeStreamDocument
    nameWithType: ChangeStreamDocument
    fullName: MongoDB.Driver.ChangeStreamDocument
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{System.Exception}
  commentId: T:System.Action{System.Exception}
  parent: System
  definition: System.Action`1
  name: Action<Exception>
  nameWithType: Action<Exception>
  fullName: System.Action<System.Exception>
  nameWithType.vb: Action(Of Exception)
  fullName.vb: System.Action(Of System.Exception)
  name.vb: Action(Of Exception)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: MongoDB.Entities.Watcher`1.Name*
  commentId: Overload:MongoDB.Entities.Watcher`1.Name
  name: Name
  nameWithType: Watcher<T>.Name
  fullName: MongoDB.Entities.Watcher<T>.Name
  nameWithType.vb: Watcher(Of T).Name
  fullName.vb: MongoDB.Entities.Watcher(Of T).Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: MongoDB.Entities.Watcher`1.IsInitialized*
  commentId: Overload:MongoDB.Entities.Watcher`1.IsInitialized
  name: IsInitialized
  nameWithType: Watcher<T>.IsInitialized
  fullName: MongoDB.Entities.Watcher<T>.IsInitialized
  nameWithType.vb: Watcher(Of T).IsInitialized
  fullName.vb: MongoDB.Entities.Watcher(Of T).IsInitialized
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: MongoDB.Entities.Watcher`1.CanRestart*
  commentId: Overload:MongoDB.Entities.Watcher`1.CanRestart
  name: CanRestart
  nameWithType: Watcher<T>.CanRestart
  fullName: MongoDB.Entities.Watcher<T>.CanRestart
  nameWithType.vb: Watcher(Of T).CanRestart
  fullName.vb: MongoDB.Entities.Watcher(Of T).CanRestart
- uid: MongoDB.Entities.Watcher`1.ResumeToken*
  commentId: Overload:MongoDB.Entities.Watcher`1.ResumeToken
  name: ResumeToken
  nameWithType: Watcher<T>.ResumeToken
  fullName: MongoDB.Entities.Watcher<T>.ResumeToken
  nameWithType.vb: Watcher(Of T).ResumeToken
  fullName.vb: MongoDB.Entities.Watcher(Of T).ResumeToken
- uid: MongoDB.Bson.BsonDocument
  commentId: T:MongoDB.Bson.BsonDocument
  parent: MongoDB.Bson
  isExternal: true
  name: BsonDocument
  nameWithType: BsonDocument
  fullName: MongoDB.Bson.BsonDocument
- uid: MongoDB.Bson
  commentId: N:MongoDB.Bson
  isExternal: true
  name: MongoDB.Bson
  nameWithType: MongoDB.Bson
  fullName: MongoDB.Bson
- uid: MongoDB.Entities.Watcher`1.Start*
  commentId: Overload:MongoDB.Entities.Watcher`1.Start
  name: Start
  nameWithType: Watcher<T>.Start
  fullName: MongoDB.Entities.Watcher<T>.Start
  nameWithType.vb: Watcher(Of T).Start
  fullName.vb: MongoDB.Entities.Watcher(Of T).Start
- uid: MongoDB.Entities.EventType
  commentId: T:MongoDB.Entities.EventType
  parent: MongoDB.Entities
  name: EventType
  nameWithType: EventType
  fullName: MongoDB.Entities.EventType
- uid: System.Linq.Expressions.Expression{System.Func{MongoDB.Driver.ChangeStreamDocument{{T}},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{MongoDB.Driver.ChangeStreamDocument{`0},System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<ChangeStreamDocument<T>, Boolean>>
  nameWithType: Expression<Func<ChangeStreamDocument<T>, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<MongoDB.Driver.ChangeStreamDocument<T>, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of ChangeStreamDocument(Of T), Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of MongoDB.Driver.ChangeStreamDocument(Of T), System.Boolean))
  name.vb: Expression(Of Func(Of ChangeStreamDocument(Of T), Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Driver.ChangeStreamDocument`1
    name: ChangeStreamDocument
    nameWithType: ChangeStreamDocument
    fullName: MongoDB.Driver.ChangeStreamDocument
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Driver.ChangeStreamDocument`1
    name: ChangeStreamDocument
    nameWithType: ChangeStreamDocument
    fullName: MongoDB.Driver.ChangeStreamDocument
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Linq.Expressions.Expression{System.Func{{T},{T}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,`0}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, T>>
  nameWithType: Expression<Func<T, T>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, T>>
  nameWithType.vb: Expression(Of Func(Of T, T))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, T))
  name.vb: Expression(Of Func(Of T, T))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{MongoDB.Driver.FilterDefinitionBuilder{MongoDB.Driver.ChangeStreamDocument{{T}}},MongoDB.Driver.FilterDefinition{MongoDB.Driver.ChangeStreamDocument{{T}}}}
  commentId: T:System.Func{MongoDB.Driver.FilterDefinitionBuilder{MongoDB.Driver.ChangeStreamDocument{`0}},MongoDB.Driver.FilterDefinition{MongoDB.Driver.ChangeStreamDocument{`0}}}
  parent: System
  definition: System.Func`2
  name: Func<FilterDefinitionBuilder<ChangeStreamDocument<T>>, FilterDefinition<ChangeStreamDocument<T>>>
  nameWithType: Func<FilterDefinitionBuilder<ChangeStreamDocument<T>>, FilterDefinition<ChangeStreamDocument<T>>>
  fullName: System.Func<MongoDB.Driver.FilterDefinitionBuilder<MongoDB.Driver.ChangeStreamDocument<T>>, MongoDB.Driver.FilterDefinition<MongoDB.Driver.ChangeStreamDocument<T>>>
  nameWithType.vb: Func(Of FilterDefinitionBuilder(Of ChangeStreamDocument(Of T)), FilterDefinition(Of ChangeStreamDocument(Of T)))
  fullName.vb: System.Func(Of MongoDB.Driver.FilterDefinitionBuilder(Of MongoDB.Driver.ChangeStreamDocument(Of T)), MongoDB.Driver.FilterDefinition(Of MongoDB.Driver.ChangeStreamDocument(Of T)))
  name.vb: Func(Of FilterDefinitionBuilder(Of ChangeStreamDocument(Of T)), FilterDefinition(Of ChangeStreamDocument(Of T)))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Driver.FilterDefinitionBuilder`1
    name: FilterDefinitionBuilder
    nameWithType: FilterDefinitionBuilder
    fullName: MongoDB.Driver.FilterDefinitionBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Driver.ChangeStreamDocument`1
    name: ChangeStreamDocument
    nameWithType: ChangeStreamDocument
    fullName: MongoDB.Driver.ChangeStreamDocument
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: MongoDB.Driver.FilterDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Driver.ChangeStreamDocument`1
    name: ChangeStreamDocument
    nameWithType: ChangeStreamDocument
    fullName: MongoDB.Driver.ChangeStreamDocument
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Driver.FilterDefinitionBuilder`1
    name: FilterDefinitionBuilder
    nameWithType: FilterDefinitionBuilder
    fullName: MongoDB.Driver.FilterDefinitionBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Driver.ChangeStreamDocument`1
    name: ChangeStreamDocument
    nameWithType: ChangeStreamDocument
    fullName: MongoDB.Driver.ChangeStreamDocument
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: MongoDB.Driver.FilterDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Driver.ChangeStreamDocument`1
    name: ChangeStreamDocument
    nameWithType: ChangeStreamDocument
    fullName: MongoDB.Driver.ChangeStreamDocument
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Watcher`1.StartWithToken*
  commentId: Overload:MongoDB.Entities.Watcher`1.StartWithToken
  name: StartWithToken
  nameWithType: Watcher<T>.StartWithToken
  fullName: MongoDB.Entities.Watcher<T>.StartWithToken
  nameWithType.vb: Watcher(Of T).StartWithToken
  fullName.vb: MongoDB.Entities.Watcher(Of T).StartWithToken
- uid: MongoDB.Entities.Watcher`1.ReStart*
  commentId: Overload:MongoDB.Entities.Watcher`1.ReStart
  name: ReStart
  nameWithType: Watcher<T>.ReStart
  fullName: MongoDB.Entities.Watcher<T>.ReStart
  nameWithType.vb: Watcher(Of T).ReStart
  fullName.vb: MongoDB.Entities.Watcher(Of T).ReStart
